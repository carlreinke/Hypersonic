// <auto-generated />
using System;
using Hypersonic.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Hypersonic.Migrations
{
    [DbContext(typeof(MediaInfoContext))]
    [Migration("20200211044941_AddLibraryPath")]
    partial class AddLibraryPath
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("Hypersonic.Data.Album", b =>
                {
                    b.Property<int>("AlbumId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Added");

                    b.Property<int?>("ArtistId");

                    b.Property<int?>("CoverPictureId");

                    b.Property<int?>("Date");

                    b.Property<bool>("Dirty");

                    b.Property<int?>("GenreId");

                    b.Property<int?>("OriginalDate");

                    b.Property<string>("SortTitle");

                    b.Property<string>("Title");

                    b.HasKey("AlbumId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CoverPictureId");

                    b.HasIndex("GenreId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Hypersonic.Data.AlbumStar", b =>
                {
                    b.Property<int>("AlbumId");

                    b.Property<int>("UserId");

                    b.Property<DateTime>("Added");

                    b.HasKey("AlbumId", "UserId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("UserId");

                    b.ToTable("AlbumStars");
                });

            modelBuilder.Entity("Hypersonic.Data.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Added");

                    b.Property<bool>("Dirty");

                    b.Property<string>("Name");

                    b.Property<string>("SortName");

                    b.HasKey("ArtistId");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Hypersonic.Data.ArtistStar", b =>
                {
                    b.Property<int>("ArtistId");

                    b.Property<int>("UserId");

                    b.Property<DateTime>("Added");

                    b.HasKey("ArtistId", "UserId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("UserId");

                    b.ToTable("ArtistStars");
                });

            modelBuilder.Entity("Hypersonic.Data.Directory", b =>
                {
                    b.Property<int>("DirectoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Added");

                    b.Property<int>("LibraryId");

                    b.Property<int?>("ParentDirectoryId");

                    b.Property<string>("Path")
                        .IsRequired();

                    b.HasKey("DirectoryId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("ParentDirectoryId");

                    b.ToTable("Directories");
                });

            modelBuilder.Entity("Hypersonic.Data.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Added");

                    b.Property<int>("DirectoryId");

                    b.Property<string>("FormatName")
                        .IsRequired();

                    b.Property<int>("LibraryId");

                    b.Property<DateTime>("ModificationTime");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<long>("Size");

                    b.HasKey("FileId");

                    b.HasIndex("DirectoryId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Hypersonic.Data.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("GenreId");

                    b.HasAlternateKey("Name");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Hypersonic.Data.Library", b =>
                {
                    b.Property<int>("LibraryId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ContentModified");

                    b.Property<bool>("IsAccessControlled");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Path")
                        .IsRequired();

                    b.HasKey("LibraryId");

                    b.HasAlternateKey("Name");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Hypersonic.Data.LibraryUser", b =>
                {
                    b.Property<int>("LibraryId");

                    b.Property<int>("UserId");

                    b.HasKey("LibraryId", "UserId");

                    b.HasIndex("LibraryId");

                    b.HasIndex("UserId");

                    b.ToTable("LibraryUsers");
                });

            modelBuilder.Entity("Hypersonic.Data.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FileId");

                    b.Property<long>("StreamHash");

                    b.Property<int>("StreamIndex");

                    b.HasKey("PictureId");

                    b.HasIndex("FileId");

                    b.HasIndex("StreamHash");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("Hypersonic.Data.Playlist", b =>
                {
                    b.Property<int>("PlaylistId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsPublic");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("UserId");

                    b.HasKey("PlaylistId");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("Hypersonic.Data.PlaylistTrack", b =>
                {
                    b.Property<int>("PlaylistId");

                    b.Property<int>("Index");

                    b.Property<int>("TrackId");

                    b.HasKey("PlaylistId", "Index");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("TrackId");

                    b.ToTable("PlaylistTracks");
                });

            modelBuilder.Entity("Hypersonic.Data.Track", b =>
                {
                    b.Property<int>("TrackId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Added");

                    b.Property<float?>("AlbumGain");

                    b.Property<int>("AlbumId");

                    b.Property<string>("AlbumSortTitle");

                    b.Property<int>("ArtistId");

                    b.Property<string>("ArtistSortName");

                    b.Property<int?>("BitRate");

                    b.Property<string>("CodecName")
                        .IsRequired();

                    b.Property<int?>("CoverPictureId");

                    b.Property<int?>("Date");

                    b.Property<int?>("DiscNumber");

                    b.Property<float?>("Duration");

                    b.Property<int>("FileId");

                    b.Property<int?>("GenreId");

                    b.Property<int>("LibraryId");

                    b.Property<int?>("OriginalDate");

                    b.Property<string>("SortTitle");

                    b.Property<int>("StreamIndex");

                    b.Property<string>("Title")
                        .IsRequired();

                    b.Property<float?>("TrackGain");

                    b.Property<int?>("TrackNumber");

                    b.HasKey("TrackId");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CoverPictureId");

                    b.HasIndex("FileId");

                    b.HasIndex("GenreId");

                    b.HasIndex("LibraryId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("Hypersonic.Data.TrackGenre", b =>
                {
                    b.Property<int>("TrackId");

                    b.Property<int>("GenreId");

                    b.HasKey("TrackId", "GenreId");

                    b.HasIndex("GenreId");

                    b.HasIndex("TrackId");

                    b.ToTable("TrackGenres");
                });

            modelBuilder.Entity("Hypersonic.Data.TrackStar", b =>
                {
                    b.Property<int>("TrackId");

                    b.Property<int>("UserId");

                    b.Property<DateTime>("Added");

                    b.HasKey("TrackId", "UserId");

                    b.HasIndex("TrackId");

                    b.HasIndex("UserId");

                    b.ToTable("TrackStars");
                });

            modelBuilder.Entity("Hypersonic.Data.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanJukebox");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsGuest");

                    b.Property<int>("MaxBitRate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Password")
                        .IsRequired();

                    b.HasKey("UserId");

                    b.HasAlternateKey("Name");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Hypersonic.Data.Album", b =>
                {
                    b.HasOne("Hypersonic.Data.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hypersonic.Data.Picture", "CoverPicture")
                        .WithMany()
                        .HasForeignKey("CoverPictureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hypersonic.Data.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Hypersonic.Data.AlbumStar", b =>
                {
                    b.HasOne("Hypersonic.Data.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hypersonic.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hypersonic.Data.ArtistStar", b =>
                {
                    b.HasOne("Hypersonic.Data.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hypersonic.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hypersonic.Data.Directory", b =>
                {
                    b.HasOne("Hypersonic.Data.Library", "Library")
                        .WithMany("Directories")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hypersonic.Data.Directory", "ParentDirectory")
                        .WithMany("Directories")
                        .HasForeignKey("ParentDirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hypersonic.Data.File", b =>
                {
                    b.HasOne("Hypersonic.Data.Directory", "Directory")
                        .WithMany("Files")
                        .HasForeignKey("DirectoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hypersonic.Data.Library", "Library")
                        .WithMany("Files")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hypersonic.Data.LibraryUser", b =>
                {
                    b.HasOne("Hypersonic.Data.Library", "Library")
                        .WithMany("LibraryUsers")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hypersonic.Data.User", "User")
                        .WithMany("LibraryUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hypersonic.Data.Picture", b =>
                {
                    b.HasOne("Hypersonic.Data.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hypersonic.Data.Playlist", b =>
                {
                    b.HasOne("Hypersonic.Data.User", "User")
                        .WithMany("Playlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hypersonic.Data.PlaylistTrack", b =>
                {
                    b.HasOne("Hypersonic.Data.Playlist", "Playlist")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hypersonic.Data.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hypersonic.Data.Track", b =>
                {
                    b.HasOne("Hypersonic.Data.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hypersonic.Data.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hypersonic.Data.Picture", "CoverPicture")
                        .WithMany()
                        .HasForeignKey("CoverPictureId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Hypersonic.Data.File", "File")
                        .WithMany("Tracks")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hypersonic.Data.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hypersonic.Data.Library", "Library")
                        .WithMany("Tracks")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hypersonic.Data.TrackGenre", b =>
                {
                    b.HasOne("Hypersonic.Data.Genre", "Genre")
                        .WithMany("TrackGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Hypersonic.Data.Track", "Track")
                        .WithMany("TrackGenres")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Hypersonic.Data.TrackStar", b =>
                {
                    b.HasOne("Hypersonic.Data.Track", "Track")
                        .WithMany()
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Hypersonic.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
